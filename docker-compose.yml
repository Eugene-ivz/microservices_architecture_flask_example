version: '3.8'
services:
  auth:
    container_name: auth_c
    build:
      context: auth
      dockerfile: auth.Dockerfile
    environment:
      - FLASK_ENV=${FLASK_ENV}
    # ports:
    #   - '5010:5010'
    expose:
      - 5010
    restart: unless-stopped
    depends_on:
        postgres:
          condition: service_healthy

  entry:
    container_name: entry_c
    build:
      context: entry
      dockerfile: entry.Dockerfile
    environment:
      - FLASK_ENV=${FLASK_ENV}
    # ports:
    #   - '5020:5020'
    expose:
      - 5020
    restart: unless-stopped
    depends_on:
        rabbitmq:
          condition: service_healthy
        mongodb:
          condition: service_started

  converter:
    container_name: converter_c
    build:
      context: converter
      dockerfile: converter.Dockerfile
    environment:
      - APP_ENV=${FLASK_ENV}
    restart: unless-stopped
    depends_on:
        rabbitmq:
          condition: service_healthy

  notification:
    container_name: notification_c
    build:
      context: notification
      dockerfile: notification.Dockerfile
    environment:
      - APP_ENV=${FLASK_ENV}
    restart: unless-stopped
    depends_on:
        rabbitmq:
          condition: service_healthy
        mongodb:
          condition: service_started
        converter:
          condition: service_started

  mongodb:
    container_name: mongodb
    image: mongo:5.0.26-focal
    ports:
      - '27050:27017'
    restart: always
    volumes:
      - mongodata:/data/db

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13.1-management
    ports:
      - 5672:5672
      - 8050:15672
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 10s
      retries: 3
      
  postgres:
    container_name: postgres_auth
    image: postgres:16.2
    shm_size: 128mb
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA} /data/postgres
    volumes:
       - postgresdata:/data/postgres
    ports:
      - '5555:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d users"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    
  nginx:
    container_name: nginx
    image: nginx:stable-alpine3.17
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth
      - entry
    restart: unless-stopped

volumes:
  postgresdata:
  mongodata:

